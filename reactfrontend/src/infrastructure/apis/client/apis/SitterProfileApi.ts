/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestResponse,
  SitterProfileAddDTO,
  SitterProfileDTORequestResponse,
  SitterProfileUpdateDTO,
} from '../models/index';
import {
    RequestResponseFromJSON,
    RequestResponseToJSON,
    SitterProfileAddDTOFromJSON,
    SitterProfileAddDTOToJSON,
    SitterProfileDTORequestResponseFromJSON,
    SitterProfileDTORequestResponseToJSON,
    SitterProfileUpdateDTOFromJSON,
    SitterProfileUpdateDTOToJSON,
} from '../models/index';

export interface ApiSitterProfileAddPostRequest {
    sitterProfileAddDTO?: SitterProfileAddDTO;
}

export interface ApiSitterProfileGetSitterIdGetRequest {
    sitterId: string;
}

export interface ApiSitterProfileUpdatePutRequest {
    sitterProfileUpdateDTO?: SitterProfileUpdateDTO;
}

/**
 * 
 */
export class SitterProfileApi extends runtime.BaseAPI {

    /**
     */
    async apiSitterProfileAddPostRaw(requestParameters: ApiSitterProfileAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SitterProfile/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SitterProfileAddDTOToJSON(requestParameters['sitterProfileAddDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSitterProfileAddPost(requestParameters: ApiSitterProfileAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiSitterProfileAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSitterProfileGetSitterIdGetRaw(requestParameters: ApiSitterProfileGetSitterIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SitterProfileDTORequestResponse>> {
        if (requestParameters['sitterId'] == null) {
            throw new runtime.RequiredError(
                'sitterId',
                'Required parameter "sitterId" was null or undefined when calling apiSitterProfileGetSitterIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SitterProfile/Get/{sitterId}`.replace(`{${"sitterId"}}`, encodeURIComponent(String(requestParameters['sitterId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SitterProfileDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSitterProfileGetSitterIdGet(requestParameters: ApiSitterProfileGetSitterIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SitterProfileDTORequestResponse> {
        const response = await this.apiSitterProfileGetSitterIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSitterProfileMyProfileGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SitterProfileDTORequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SitterProfile/MyProfile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SitterProfileDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSitterProfileMyProfileGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SitterProfileDTORequestResponse> {
        const response = await this.apiSitterProfileMyProfileGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSitterProfileUpdatePutRaw(requestParameters: ApiSitterProfileUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/SitterProfile/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SitterProfileUpdateDTOToJSON(requestParameters['sitterProfileUpdateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSitterProfileUpdatePut(requestParameters: ApiSitterProfileUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiSitterProfileUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
