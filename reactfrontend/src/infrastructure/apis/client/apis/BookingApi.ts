/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BookingAddDTO,
  BookingDTOListRequestResponse,
  BookingDTORequestResponse,
  BookingUpdateDTO,
  RequestResponse,
} from '../models/index';
import {
    BookingAddDTOFromJSON,
    BookingAddDTOToJSON,
    BookingDTOListRequestResponseFromJSON,
    BookingDTOListRequestResponseToJSON,
    BookingDTORequestResponseFromJSON,
    BookingDTORequestResponseToJSON,
    BookingUpdateDTOFromJSON,
    BookingUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models/index';

export interface ApiBookingCreatePostRequest {
    bookingAddDTO?: BookingAddDTO;
}

export interface ApiBookingDeleteIdDeleteRequest {
    id: string;
}

export interface ApiBookingGetByIdIdGetRequest {
    id: string;
}

export interface ApiBookingUpdateIdPutRequest {
    id: string;
    bookingUpdateDTO?: BookingUpdateDTO;
}

/**
 * 
 */
export class BookingApi extends runtime.BaseAPI {

    /**
     */
    async apiBookingCreatePostRaw(requestParameters: ApiBookingCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Booking/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BookingAddDTOToJSON(requestParameters['bookingAddDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingCreatePost(requestParameters: ApiBookingCreatePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiBookingCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingDeleteIdDeleteRaw(requestParameters: ApiBookingDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBookingDeleteIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Booking/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingDeleteIdDelete(requestParameters: ApiBookingDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiBookingDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingGetByIdIdGetRaw(requestParameters: ApiBookingGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingDTORequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBookingGetByIdIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Booking/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingGetByIdIdGet(requestParameters: ApiBookingGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingDTORequestResponse> {
        const response = await this.apiBookingGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingGetMyBookingsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingDTOListRequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Booking/GetMyBookings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingDTOListRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingGetMyBookingsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingDTOListRequestResponse> {
        const response = await this.apiBookingGetMyBookingsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookingUpdateIdPutRaw(requestParameters: ApiBookingUpdateIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBookingUpdateIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Booking/Update/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookingUpdateDTOToJSON(requestParameters['bookingUpdateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiBookingUpdateIdPut(requestParameters: ApiBookingUpdateIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiBookingUpdateIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
